#!/usr/bin/python

from numpy import linalg as LA
import numpy as np


def normalize(v):
  return v / LA.norm(v)

def proj(u, w):
  return (np.vdot(u, w) / (LA.norm(w))** 2) * w


def gram_schmidt(A):
  m, n = np.shape(A)
  Q = np.zeros(shape=(m, n))
  Q[:, 0] = normalize(A[:, 0])
  for i in range(1, n, 1):
    # Get correct column
    u = A[:, i]
    # Create a copy of u
    w = u
    # Substract projections
    for k in range(0, i, 1):
      u -= proj(w, Q[:, k]) 
    # Normalize
    Q[:, i] = normalize(u)
  return Q       


# Get input from the user.
m, n = [int(x) for x in 
        raw_input("Please enter m and n, separated by whitespace:\n").split()]

# Generate random matrix of correct dimensions
A = np.random.uniform(-100, 100, (m, n))
print '{}'.format(A)
print '{}'.format(gram_schmidt(A))
q, r = LA.qr(A)
print '{}'.format(q)






